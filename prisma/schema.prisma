generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type             String
  provider         String
  providerAccountId String
  refresh_token    String? @db.Text
  access_token     String? @db.Text
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String? @db.Text
  session_state    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  conversations Conversation[]
  emotions      Emotion[]
  topics        Topic[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  emotions  Emotion[]
  topics    Topic[]
}

model Message {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  content        String       @db.Text
  role           String       // 'user' or 'assistant'
  embedding      Unsupported("vector(1536)")?  // OpenAI embedding dimension
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  emotions       Emotion[]
  topics         Topic[]
}

model Emotion {
  id             String        @id @default(cuid())
  name           String
  intensity      Float         // 0 to 1
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  conversationId String
  conversation   Conversation  @relation(fields: [conversationId], references: [id])
  messages       Message[]
  createdAt      DateTime      @default(now())
}

model Topic {
  id             String        @id @default(cuid())
  name           String
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  conversationId String
  conversation   Conversation  @relation(fields: [conversationId], references: [id])
  messages       Message[]
  createdAt      DateTime      @default(now())
} 